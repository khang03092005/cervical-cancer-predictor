from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
import datetime
import numpy as np
from sklearn.impute import SimpleImputer
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
import os
import requests
import json
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv("OPENROUTER_API_KEY")

def ask_openrouter(prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://yourdomain.com",
        "X-Title": "CervicalCancerPredictor"
    }

    data = {
        # "model": "google/gemini-flash-2.5",
        #   "model":"cognitivecomputations/dolphin-mistral-24b-venice-edition:free",
        #    "model":"google/gemma-3n-e2b-it:free",
        #    "model":"cognitivecomputations/dolphin-mistral-24b-venice-edition:free",
        # "model": "tngtech/deepseek-r1t2-chimera:free",

          "model":"openrouter/cypher-alpha:free",


        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ]
    }

    response = requests.post(url=url, headers=headers, data=json.dumps(data))
    
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"L·ªói t·ª´ OpenRouter: {response.status_code} - {response.text}"


from feature_advice import feature_advice  # Load m√¥ t·∫£

app = Flask(__name__)
app.secret_key = "super-secret-key" 

feature_names = ['Age', 'Number of sexual partners', 'First sexual intercourse',
    'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',
    'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',
    'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',
    'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',
    'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',
    'STDs:pelvic inflammatory disease', 'STDs:genital herpes',
    'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',
    'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',
    'STDs: Time since first diagnosis', 'STDs: Time since last diagnosis',
    'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Dx', 'Hinselmann', 'Schiller', 'Citology']
label_mapping = {
    "Age": "Tu·ªïi",
    "Number of sexual partners": "S·ªë b·∫°n t√¨nh",
    "First sexual intercourse": "Tu·ªïi quan h·ªá l·∫ßn ƒë·∫ßu",
    "Num of pregnancies": "S·ªë l·∫ßn mang thai",
    "Smokes": "H√∫t thu·ªëc",
    "Smokes (years)": "S·ªë nƒÉm h√∫t thu·ªëc",
    "Smokes (packs/year)": "S·ªë g√≥i m·ªói nƒÉm",
    "Hormonal Contraceptives": "D√πng thu·ªëc tr√°nh thai",
    "Hormonal Contraceptives (years)": "S·ªë nƒÉm d√πng thu·ªëc tr√°nh thai",
    "IUD": "ƒê·∫∑t v√≤ng",
    "IUD (years)": "S·ªë nƒÉm ƒë·∫∑t v√≤ng",
    "STDs": "T·ª´ng m·∫Øc STDs",
    "STDs (number)": "S·ªë l·∫ßn m·∫Øc STDs",
    "STDs:condylomatosis": "S√πi m√†o g√†",
    "STDs:cervical condylomatosis": "S√πi m√†o g√† c·ªï t·ª≠ cung",
    "STDs:vaginal condylomatosis": "S√πi m√†o g√† √¢m ƒë·∫°o",
    "STDs:vulvo-perineal condylomatosis": "S√πi m√†o g√† √¢m h·ªô - t·∫ßng sinh m√¥n",
    "STDs:syphilis": "B·ªánh giang mai",
    "STDs:pelvic inflammatory disease": "Vi√™m v√πng ch·∫≠u",
    "STDs:genital herpes": "M·ª•n r·ªôp sinh d·ª•c",
    "STDs:molluscum contagiosum": "U m·ªÅm l√¢y",
    "STDs:AIDS": "AIDS",
    "STDs:HIV": "HIV",
    "STDs:Hepatitis B": "Vi√™m gan B",
    "STDs:HPV": "Nhi·ªÖm HPV",
    "STDs: Number of diagnosis": "S·ªë l·∫ßn ƒë∆∞·ª£c ch·∫©n ƒëo√°n STDs",
    "STDs: Time since first diagnosis": "Th·ªùi gian t·ª´ l·∫ßn ch·∫©n ƒëo√°n STDs ƒë·∫ßu ti√™n",
    "STDs: Time since last diagnosis": "Th·ªùi gian t·ª´ l·∫ßn ch·∫©n ƒëo√°n STDs g·∫ßn nh·∫•t",
    "Dx:Cancer": "Ch·∫©n ƒëo√°n ung th∆∞",
    "Dx:CIN": "Ch·∫©n ƒëo√°n CIN",
    "Dx:HPV": "Ch·∫©n ƒëo√°n HPV",
    "Dx": "Ch·∫©n ƒëo√°n b·∫•t th∆∞·ªùng",
    "Hinselmann": "Hinselmann d∆∞∆°ng t√≠nh",
    "Schiller": "Schiller d∆∞∆°ng t√≠nh",
    "Citology": "T·∫ø b√†o h·ªçc d∆∞∆°ng t√≠nh",
    "Biopsy": "Sinh thi·∫øt d∆∞∆°ng t√≠nh"
}


model = joblib.load("logistic_model.pkl")
imputer = joblib.load("imputer.pkl")
X_background = shap.maskers.Independent(pd.DataFrame([[0]*len(feature_names)], columns=feature_names))
explainer = shap.LinearExplainer(model, masker=X_background, feature_names=feature_names)


def generate_advice_auto(name, value, shap_val, percent):
    
    if shap_val <= 0:
        return ""  # B·ªè qua n·∫øu ƒë·∫∑c tr∆∞ng l√†m gi·∫£m nguy c∆°
    trend = "tƒÉng nguy c∆°" 
    vi_name = label_mapping.get(name, name)
    line = f"‚Ä¢ {vi_name} = {value} ‚Üí {trend} ({shap_val:+.2f}, ·∫£nh h∆∞·ªüng: {percent:.1f}%)\n"


    if name in feature_advice:
        desc = feature_advice[name]["desc"]
        action = feature_advice[name]["action"]
    else:
        desc = f"Y·∫øu t·ªë n√†y ·∫£nh h∆∞·ªüng {trend} ƒë·∫øn nguy c∆° m·∫Øc b·ªánh."
        action = "N√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© n·∫øu b·∫°n ch∆∞a r√µ v·ªÅ y·∫øu t·ªë n√†y."

    return f"{line}  {desc}\n  üëâ {action}\n"

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        try:
            input_dict = dict.fromkeys(feature_names, np.nan)

            # Ghi ƒë√® b·∫±ng c√°c gi√° tr·ªã ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
            for name in feature_names:
                raw_val = request.form.get(name)
                try:
                    input_dict[name] = float(raw_val)
                except (TypeError, ValueError):
                    pass  # gi·ªØ nguy√™n np.nan n·∫øu kh√¥ng th·ªÉ chuy·ªÉn

            # Ki·ªÉm tra: n·∫øu m·ªçi gi√° tr·ªã ƒë·ªÅu l√† NaN ‚Üí tr·∫£ l·ªói nh·∫π nh√†ng
            if all(np.isnan(v) for v in input_dict.values()):
                return "‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt gi√° tr·ªã v√†o bi·ªÉu m·∫´u."

            # D·ª±ng DataFrame v·ªõi ƒë·ªß c·ªôt
            X_input = pd.DataFrame([input_dict], columns=feature_names)

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt c√≥ gi√° tr·ªã th·ª±c
            valid_cols = X_input.notna().sum().sum()
            if valid_cols == 0:
                return "‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω v√¨ t·∫•t c·∫£ c√°c gi√° tr·ªã ƒë·ªÅu tr·ªëng."

            # √Åp d·ª•ng Imputer n·∫øu h·ª£p l·ªá
            
            X_input = pd.DataFrame(imputer.transform(X_input), columns=feature_names)


            # B∆∞·ªõc 3: D·ª± ƒëo√°n
            prediction = model.predict(X_input)[0]
            proba = model.predict_proba(X_input)[0][1] * 100

            # B∆∞·ªõc 4: SHAP
            shap_values = explainer(X_input)
            shap_score = shap_values.values[0]
            total_abs = sum(abs(val) for val in shap_score)

            impacts = [
                (feature_names[i], shap_score[i], abs(shap_score[i]) / total_abs * 100)
                for i in range(len(feature_names))
            ]
            impacts_sorted = sorted(impacts, key=lambda x: abs(x[1]), reverse=True)
            filtered = [x for x in impacts_sorted if x[2] >= 5]
            if not filtered:
                filtered = impacts_sorted[:3]

            # B∆∞·ªõc 5: Sinh l·ªùi khuy√™n
            if proba >= 25:
                advice = "üî¥ C·∫¢NH B√ÅO: C√≥ nguy c∆° ti·ªÅm ·∫©n.\n\n"

                has_high_impact = any(pct > 25 for _, _, pct in filtered)

                for name, shap_val, percent in filtered:
                    val = X_input.iloc[0][name]
                    advice += generate_advice_auto(name, val, shap_val, percent)

                if has_high_impact:
                    advice = (
                        "‚ö†Ô∏è M·ªôt s·ªë y·∫øu t·ªë c√≥ ·∫£nh h∆∞·ªüng r·∫•t l·ªõn ƒë·∫øn k·∫øt qu·∫£ (tr√™n 25%). "
                        "B·∫°n n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© s·ªõm.\n\n"
                    ) + advice

                advice += (
                    "\nüí° Khuy·∫øn ngh·ªã:\n"
                    "‚Ä¢ Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa\n"
                    "‚Ä¢ Ti·∫øn h√†nh x√©t nghi·ªám Pap smear ho·∫∑c HPV n·∫øu ch∆∞a l√†m\n"
                    "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh, ƒÉn u·ªëng khoa h·ªçc\n"
                    "‚Ä¢ Tuy·ªát ƒë·ªëi tr√°nh thu·ªëc l√°, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
                    "‚Ä¢ Ti√™m vaccine HPV n·∫øu ch∆∞a ti√™m\n"
                    "\nS·ª©c kh·ªèe c·ªßa b·∫°n l√† ƒëi·ªÅu quan tr·ªçng nh·∫•t. H√£y h√†nh ƒë·ªông ngay h√¥m nay! ‚ù§Ô∏è"
                )
            else:
                advice = (
                    "‚úÖ B·∫°n hi·ªán kh√¥ng c√≥ nguy c∆° ƒë√°ng k·ªÉ.\n\n"
                    "üí° Tuy nhi√™n, h√£y:\n"
                    "‚Ä¢ Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh\n"
                    "‚Ä¢ Kh√°m ph·ª• khoa ƒë·ªãnh k·ª≥ (√≠t nh·∫•t m·ªói 6‚Äì12 th√°ng)\n"
                    "‚Ä¢ Tr√°nh h√∫t thu·ªëc, h·∫°n ch·∫ø r∆∞·ª£u bia\n"
                    "‚Ä¢ N·∫øu ch∆∞a ti√™m vaccine HPV, n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v·ªÅ vi·ªác ti√™m ph√≤ng\n"
                    "\nCh√∫c b·∫°n lu√¥n kh·ªèe m·∫°nh ‚ù§Ô∏è"
                )

            extra_insight = ask_openrouter(f"H√£y ƒë∆∞a ra ph√¢n t√≠ch y khoa b·∫±ng ti·∫øng Vi·ªát d·ª±a tr√™n l·ªùi khuy√™n sau:\n{advice}")

            # B∆∞·ªõc 6: SHAP plot
            
            plt.figure()
            shap.plots.waterfall(shap_values[0], show=False)  # s·ª≠ d·ª•ng matplotlib backend
            plt.savefig("static/shap_plot.png", bbox_inches='tight')
            plt.close()
            if "history" not in session:
                session["history"] = []

            session["history"].append({
                "input": {k: request.form.get(k) for k in feature_names},
                "result": int(prediction),
                "proba": round(proba, 2),
                "advice": advice,
                "timestamp": datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
            })

            session.modified = True
            return render_template("index.html", features=feature_names,
                                   result=prediction, proba=round(proba, 2),
                                   advice=advice, extra_insight=extra_insight)


        except Exception as e:
            return f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {e}"
    return render_template("index.html", features=feature_names, result=None)
from flask import jsonify  

@app.route("/ask", methods=["POST"])
def ask():
    try:
        data = request.get_json()
        prompt = data.get("prompt", "")
        if not prompt.strip():
            return jsonify({"reply": "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi h·ª£p l·ªá."})
        reply = ask_openrouter(prompt)
        return jsonify({"reply": reply})
    except Exception as e:
        return jsonify({"reply": f"L·ªói: {e}"})




@app.route("/monitor")
def monitor():
    predictions = session.get("history", [])
    labels = [f"L·∫ßn {i+1}" for i in range(len(predictions))]
    probabilities = [p.get("proba", 0) for p in predictions]

    # ‚úÖ Truy·ªÅn th√™m timestamp v√† proba ƒë·∫ßy ƒë·ªß sang template
    return render_template("monitor.html",
                           labels=labels,
                           probabilities=probabilities,
                           history=predictions)



@app.route("/predict", methods=["POST"])
def predict():
    return redirect(url_for("index"))


@app.route('/history')
def history():
    history = session.get("history", [])
    return render_template("history.html", history=history, label_mapping=label_mapping)


@app.route("/clear_history")
def clear_history():
    session.pop("history", None)  # Xo√° l·ªãch s·ª≠ ng∆∞·ªùi d√πng hi·ªán t·∫°i (trong session)
    return redirect(url_for("monitor"))


if __name__ == "__main__":
    app.run(debug=True)